// Decompiled with JetBrains decompiler
// Type: System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration
// Assembly: EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// MVID: 000F5452-2AD1-45BF-987B-3043022F9799
// Assembly location: C:\Users\suckt\source\repos\Epam_Lab_Task\packages\EntityFramework.6.1.3\lib\net45\EntityFramework.dll

using System.ComponentModel.DataAnnotations.Schema;

namespace System.Data.Entity.ModelConfiguration.Configuration
{
  /// <summary>
  /// Used to configure a <see cref="T:System.decimal" /> property of an entity type or complex type.
  /// This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder" />.
  /// </summary>
  public class DecimalPropertyConfiguration : PrimitivePropertyConfiguration
  {
    internal DecimalPropertyConfiguration(System.Data.Entity.ModelConfiguration.Configuration.Properties.Primitive.DecimalPropertyConfiguration configuration)
      : base((System.Data.Entity.ModelConfiguration.Configuration.Properties.Primitive.PrimitivePropertyConfiguration) configuration)
    {
    }

    /// <summary>
    /// Configures the property to be optional.
    /// The database column used to store this property will be nullable.
    /// </summary>
    /// <returns> The same DecimalPropertyConfiguration instance so that multiple calls can be chained. </returns>
    public DecimalPropertyConfiguration IsOptional()
    {
      base.IsOptional();
      return this;
    }

    /// <summary>
    /// Configures the property to be required.
    /// The database column used to store this property will be non-nullable.
    /// <see cref="T:System.decimal" /> properties are required by default.
    /// </summary>
    /// <returns> The same DecimalPropertyConfiguration instance so that multiple calls can be chained. </returns>
    public DecimalPropertyConfiguration IsRequired()
    {
      base.IsRequired();
      return this;
    }

    /// <summary>
    /// Configures how values for the property are generated by the database.
    /// </summary>
    /// <param name="databaseGeneratedOption">
    /// The pattern used to generate values for the property in the database.
    /// Setting 'null' will cause the default option to be used, which may be 'None', 'Identity', or 'Computed' depending
    /// on the type of the property, its semantics in the model (e.g. primary keys are treated differently), and which
    /// set of conventions are being used.
    /// </param>
    /// <returns> The same DecimalPropertyConfiguration instance so that multiple calls can be chained. </returns>
    public DecimalPropertyConfiguration HasDatabaseGeneratedOption(
      DatabaseGeneratedOption? databaseGeneratedOption)
    {
      base.HasDatabaseGeneratedOption(databaseGeneratedOption);
      return this;
    }

    /// <summary>
    /// Configures the property to be used as an optimistic concurrency token.
    /// </summary>
    /// <returns> The same DecimalPropertyConfiguration instance so that multiple calls can be chained. </returns>
    public DecimalPropertyConfiguration IsConcurrencyToken()
    {
      base.IsConcurrencyToken();
      return this;
    }

    /// <summary>
    /// Configures whether or not the property is to be used as an optimistic concurrency token.
    /// </summary>
    /// <param name="concurrencyToken"> Value indicating if the property is a concurrency token or not. Specifying 'null' will remove the concurrency token facet from the property. Specifying 'null' will cause the same runtime behavior as specifying 'false'. </param>
    /// <returns> The same DecimalPropertyConfiguration instance so that multiple calls can be chained. </returns>
    public DecimalPropertyConfiguration IsConcurrencyToken(
      bool? concurrencyToken)
    {
      base.IsConcurrencyToken(concurrencyToken);
      return this;
    }

    /// <summary>
    /// Configures the name of the database column used to store the property.
    /// </summary>
    /// <param name="columnName"> The name of the column. </param>
    /// <returns> The same DecimalPropertyConfiguration instance so that multiple calls can be chained. </returns>
    public DecimalPropertyConfiguration HasColumnName(string columnName)
    {
      base.HasColumnName(columnName);
      return this;
    }

    /// <summary>
    /// Sets an annotation in the model for the database column used to store the property. The annotation
    /// value can later be used when processing the column such as when creating migrations.
    /// </summary>
    /// <remarks>
    /// It will likely be necessary to register a <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> if the type of
    /// the annotation value is anything other than a string. Passing a null value clears any annotation with
    /// the given name on the column that had been previously set.
    /// </remarks>
    /// <param name="name">The annotation name, which must be a valid C#/EDM identifier.</param>
    /// <param name="value">The annotation value, which may be a string or some other type that
    /// can be serialized with an <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    /// .
    ///             <returns>The same DecimalPropertyConfiguration instance so that multiple calls can be chained.</returns>
    public DecimalPropertyConfiguration HasColumnAnnotation(
      string name,
      object value)
    {
      base.HasColumnAnnotation(name, value);
      return this;
    }

    /// <summary>
    /// Configures the data type of the database column used to store the property.
    /// </summary>
    /// <param name="columnType"> Name of the database provider specific data type. </param>
    /// <returns> The same DecimalPropertyConfiguration instance so that multiple calls can be chained. </returns>
    public DecimalPropertyConfiguration HasColumnType(string columnType)
    {
      base.HasColumnType(columnType);
      return this;
    }

    /// <summary>
    /// Configures the order of the database column used to store the property.
    /// This method is also used to specify key ordering when an entity type has a composite key.
    /// </summary>
    /// <param name="columnOrder"> The order that this column should appear in the database table. </param>
    /// <returns> The same DecimalPropertyConfiguration instance so that multiple calls can be chained. </returns>
    public DecimalPropertyConfiguration HasColumnOrder(int? columnOrder)
    {
      base.HasColumnOrder(columnOrder);
      return this;
    }

    /// <summary>Configures the precision and scale of the property.</summary>
    /// <param name="precision"> The precision of the property. </param>
    /// <param name="scale"> The scale of the property. </param>
    /// <returns> The same DecimalPropertyConfiguration instance so that multiple calls can be chained. </returns>
    public DecimalPropertyConfiguration HasPrecision(
      byte precision,
      byte scale)
    {
      this.Configuration.Precision = new byte?(precision);
      this.Configuration.Scale = new byte?(scale);
      return this;
    }

    internal System.Data.Entity.ModelConfiguration.Configuration.Properties.Primitive.DecimalPropertyConfiguration Configuration
    {
      get
      {
        return (System.Data.Entity.ModelConfiguration.Configuration.Properties.Primitive.DecimalPropertyConfiguration) base.Configuration;
      }
    }
  }
}
