// Decompiled with JetBrains decompiler
// Type: System.Data.Entity.Core.Common.EntitySql.CqlLexer
// Assembly: EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// MVID: 000F5452-2AD1-45BF-987B-3043022F9799
// Assembly location: C:\Users\suckt\source\repos\Epam_Lab_Task\packages\EntityFramework.6.1.3\lib\net45\EntityFramework.dll

using System.Collections.Generic;
using System.Data.Entity.Core.Common.EntitySql.AST;
using System.Data.Entity.Resources;
using System.IO;
using System.Text.RegularExpressions;

namespace System.Data.Entity.Core.Common.EntitySql
{
  internal sealed class CqlLexer
  {
    private static readonly int[] yy_state_dtrans = new int[1];
    private static string[] yy_error_string = new string[2]
    {
      "Error: Internal error.\n",
      "Error: Unmatched input.\n"
    };
    private static readonly int[] yy_acpt = new int[85]
    {
      0,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      2,
      4,
      4,
      4,
      4,
      4,
      0,
      4,
      4,
      4,
      4,
      0,
      4,
      4,
      4,
      4,
      0,
      4,
      4,
      4,
      0,
      4,
      4,
      0,
      4,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4
    };
    private static readonly int[] yy_cmap = new int[130]
    {
      11,
      11,
      11,
      11,
      11,
      11,
      11,
      11,
      11,
      11,
      27,
      11,
      11,
      8,
      11,
      11,
      11,
      11,
      11,
      11,
      11,
      11,
      11,
      11,
      11,
      11,
      11,
      11,
      11,
      11,
      11,
      11,
      12,
      33,
      28,
      11,
      11,
      39,
      36,
      10,
      40,
      40,
      39,
      38,
      40,
      25,
      24,
      39,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      40,
      40,
      34,
      32,
      35,
      40,
      29,
      5,
      2,
      30,
      13,
      15,
      18,
      20,
      30,
      3,
      30,
      30,
      23,
      16,
      26,
      17,
      30,
      30,
      6,
      19,
      14,
      21,
      30,
      30,
      9,
      7,
      30,
      1,
      11,
      40,
      11,
      31,
      11,
      5,
      2,
      30,
      13,
      15,
      18,
      20,
      30,
      3,
      30,
      30,
      23,
      16,
      4,
      17,
      30,
      30,
      6,
      19,
      14,
      21,
      30,
      30,
      9,
      7,
      30,
      40,
      37,
      40,
      11,
      11,
      0,
      41
    };
    private static readonly int[] yy_rmap = new int[85]
    {
      0,
      1,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      1,
      1,
      11,
      1,
      1,
      1,
      1,
      12,
      13,
      1,
      14,
      14,
      15,
      16,
      17,
      1,
      18,
      10,
      19,
      20,
      1,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      5,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      11,
      64,
      65,
      66,
      67,
      68,
      11,
      69
    };
    private static readonly int[,] yy_nxt = new int[70, 42]
    {
      {
        1,
        2,
        3,
        83,
        83,
        83,
        83,
        83,
        4,
        20,
        19,
        -1,
        4,
        84,
        64,
        83,
        83,
        83,
        71,
        83,
        72,
        83,
        5,
        83,
        6,
        7,
        25,
        8,
        24,
        29,
        83,
        83,
        22,
        23,
        28,
        23,
        33,
        36,
        32,
        32,
        27,
        1
      },
      {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        76,
        83,
        83,
        83,
        83,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        4,
        -1,
        -1,
        -1,
        4,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        21,
        -1,
        39,
        21,
        -1,
        21,
        -1,
        -1,
        26,
        5,
        31,
        40,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        35,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        41,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        8,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        19,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        24,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        11,
        11,
        11,
        11,
        11,
        11,
        -1,
        11,
        -1,
        -1,
        -1,
        11,
        11,
        11,
        11,
        11,
        11,
        11,
        11,
        11,
        11,
        11,
        -1,
        -1,
        11,
        -1,
        -1,
        -1,
        11,
        11,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        9,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        -1,
        83,
        38,
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        32,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        10,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        -1,
        83,
        19,
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        24,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        21,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        32,
        -1,
        -1,
        32,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        83,
        14,
        83,
        83,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        21,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        32,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        44,
        83,
        45,
        -1,
        44,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        21,
        -1,
        39,
        21,
        -1,
        21,
        -1,
        -1,
        -1,
        35,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        32,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        21,
        -1,
        -1,
        -1,
        -1,
        21,
        -1,
        -1,
        -1,
        37,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        38,
        38,
        38,
        38,
        38,
        38,
        38,
        -1,
        38,
        12,
        38,
        38,
        38,
        38,
        38,
        38,
        38,
        38,
        38,
        38,
        38,
        38,
        38,
        38,
        38,
        38,
        -1,
        -1,
        38,
        38,
        38,
        38,
        38,
        38,
        38,
        38,
        38,
        38,
        38,
        38,
        -1
      },
      {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        37,
        -1,
        -1,
        42,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        42,
        -1,
        -1,
        -1
      },
      {
        -1,
        41,
        41,
        41,
        41,
        41,
        41,
        41,
        43,
        41,
        41,
        41,
        41,
        41,
        41,
        41,
        41,
        41,
        41,
        41,
        41,
        41,
        41,
        41,
        41,
        41,
        41,
        13,
        41,
        41,
        41,
        41,
        41,
        41,
        41,
        41,
        41,
        41,
        41,
        41,
        41,
        13
      },
      {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        37,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        13,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        44,
        -1,
        45,
        -1,
        44,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        45,
        45,
        45,
        45,
        45,
        45,
        45,
        -1,
        45,
        15,
        45,
        45,
        45,
        45,
        45,
        45,
        45,
        45,
        45,
        45,
        45,
        45,
        45,
        45,
        45,
        45,
        -1,
        -1,
        45,
        45,
        45,
        45,
        45,
        45,
        45,
        45,
        45,
        45,
        45,
        45,
        -1
      },
      {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        46,
        -1,
        47,
        -1,
        46,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        47,
        47,
        47,
        47,
        47,
        47,
        47,
        -1,
        47,
        16,
        47,
        47,
        47,
        47,
        47,
        47,
        47,
        47,
        47,
        47,
        47,
        47,
        47,
        47,
        47,
        47,
        -1,
        -1,
        47,
        47,
        47,
        47,
        47,
        47,
        47,
        47,
        47,
        47,
        47,
        47,
        -1
      },
      {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        48,
        -1,
        38,
        -1,
        48,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        49,
        -1,
        50,
        -1,
        49,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        -1,
        50,
        17,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        -1,
        -1,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        -1
      },
      {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        51,
        -1,
        52,
        -1,
        51,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        52,
        52,
        52,
        52,
        52,
        52,
        52,
        -1,
        52,
        18,
        52,
        52,
        52,
        52,
        52,
        52,
        52,
        52,
        52,
        52,
        52,
        52,
        52,
        52,
        52,
        52,
        -1,
        -1,
        52,
        52,
        52,
        52,
        52,
        52,
        52,
        52,
        52,
        52,
        52,
        52,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        30,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        46,
        83,
        47,
        -1,
        46,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        83,
        34,
        83,
        83,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        48,
        83,
        38,
        -1,
        48,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        30,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        49,
        83,
        50,
        -1,
        49,
        83,
        83,
        83,
        83,
        81,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        -1,
        83,
        -1,
        -1,
        -1,
        54,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        51,
        83,
        52,
        -1,
        51,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        56,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        83,
        58,
        83,
        83,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        60,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        65,
        83,
        83,
        53,
        83,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        83,
        83,
        55,
        83,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        77,
        57,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        59,
        83,
        83,
        83,
        83,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        83,
        61,
        83,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        83,
        83,
        62,
        83,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        83,
        63,
        83,
        83,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        66,
        83,
        83,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        67,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        68,
        83,
        83,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        69,
        83,
        83,
        83,
        83,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        70,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        73,
        83,
        83,
        83,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        73,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        79,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        83,
        80,
        83,
        83,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        74,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        82,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        75,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      },
      {
        -1,
        -1,
        83,
        83,
        83,
        78,
        83,
        83,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        83,
        77,
        83,
        -1,
        -1,
        83,
        -1,
        -1,
        -1,
        83,
        77,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      }
    };
    private static readonly StringComparer _stringComparer = StringComparer.OrdinalIgnoreCase;
    private static readonly char[] _newLineCharacters = new char[5]
    {
      '\n',
      '\x0085',
      '\v',
      '\x2028',
      '\x2029'
    };
    private const int YY_BUFFER_SIZE = 512;
    private const int YY_F = -1;
    private const int YY_NO_STATE = -1;
    private const int YY_NOT_ACCEPT = 0;
    private const int YY_START = 1;
    private const int YY_END = 2;
    private const int YY_NO_ANCHOR = 4;
    private const int YY_BOL = 128;
    private const int YY_EOF = 129;
    private const int YYINITIAL = 0;
    private const int YY_E_INTERNAL = 0;
    private const int YY_E_MATCH = 1;
    private const string _datetimeValueRegularExpression = "^[0-9]{4}-[0-9]{1,2}-[0-9]{1,2}([ ])+[0-9]{1,2}:[0-9]{1,2}(:[0-9]{1,2}(\\.[0-9]{1,7})?)?$";
    private const string _timeValueRegularExpression = "^[0-9]{1,2}:[0-9]{1,2}(:[0-9]{1,2}(\\.[0-9]{1,7})?)?$";
    private const string _datetimeOffsetValueRegularExpression = "^[0-9]{4}-[0-9]{1,2}-[0-9]{1,2}([ ])+[0-9]{1,2}:[0-9]{1,2}(:[0-9]{1,2}(\\.[0-9]{1,7})?)?([ ])*[\\+-][0-9]{1,2}:[0-9]{1,2}$";
    private readonly CqlLexer.AcceptMethod[] accept_dispatch;
    private readonly TextReader yy_reader;
    private int yy_buffer_index;
    private int yy_buffer_read;
    private int yy_buffer_start;
    private int yy_buffer_end;
    private char[] yy_buffer;
    private int yychar;
    private int yyline;
    private bool yy_at_bol;
    private int yy_lexical_state;
    private bool yy_last_was_cr;
    private static Dictionary<string, short> _keywords;
    private static HashSet<string> _invalidAliasNames;
    private static HashSet<string> _invalidInlineFunctionNames;
    private static Dictionary<string, short> _operators;
    private static Dictionary<string, short> _punctuators;
    private static HashSet<string> _canonicalFunctionNames;
    private static Regex _reDateTimeValue;
    private static Regex _reTimeValue;
    private static Regex _reDateTimeOffsetValue;
    private int _iPos;
    private int _lineNumber;
    private ParserOptions _parserOptions;
    private readonly string _query;
    private bool _symbolAsIdentifierState;
    private bool _symbolAsAliasIdentifierState;
    private bool _symbolAsInlineFunctionNameState;

    internal CqlLexer(TextReader reader)
      : this()
    {
      if (reader == null)
        throw new EntitySqlException(EntityRes.GetString("ParserInputError"));
      this.yy_reader = reader;
    }

    internal CqlLexer(FileStream instream)
      : this()
    {
      if (instream == null)
        throw new EntitySqlException(EntityRes.GetString("ParserInputError"));
      this.yy_reader = (TextReader) new StreamReader((Stream) instream);
    }

    private CqlLexer()
    {
      this.yy_buffer = new char[512];
      this.yy_buffer_read = 0;
      this.yy_buffer_index = 0;
      this.yy_buffer_start = 0;
      this.yy_buffer_end = 0;
      this.yychar = 0;
      this.yyline = 0;
      this.yy_at_bol = true;
      this.yy_lexical_state = 0;
      this.accept_dispatch = new CqlLexer.AcceptMethod[85]
      {
        null,
        null,
        new CqlLexer.AcceptMethod(this.Accept_2),
        new CqlLexer.AcceptMethod(this.Accept_3),
        new CqlLexer.AcceptMethod(this.Accept_4),
        new CqlLexer.AcceptMethod(this.Accept_5),
        new CqlLexer.AcceptMethod(this.Accept_6),
        new CqlLexer.AcceptMethod(this.Accept_7),
        new CqlLexer.AcceptMethod(this.Accept_8),
        new CqlLexer.AcceptMethod(this.Accept_9),
        new CqlLexer.AcceptMethod(this.Accept_10),
        new CqlLexer.AcceptMethod(this.Accept_11),
        new CqlLexer.AcceptMethod(this.Accept_12),
        new CqlLexer.AcceptMethod(this.Accept_13),
        new CqlLexer.AcceptMethod(this.Accept_14),
        new CqlLexer.AcceptMethod(this.Accept_15),
        new CqlLexer.AcceptMethod(this.Accept_16),
        new CqlLexer.AcceptMethod(this.Accept_17),
        new CqlLexer.AcceptMethod(this.Accept_18),
        null,
        new CqlLexer.AcceptMethod(this.Accept_20),
        new CqlLexer.AcceptMethod(this.Accept_21),
        new CqlLexer.AcceptMethod(this.Accept_22),
        new CqlLexer.AcceptMethod(this.Accept_23),
        null,
        new CqlLexer.AcceptMethod(this.Accept_25),
        new CqlLexer.AcceptMethod(this.Accept_26),
        new CqlLexer.AcceptMethod(this.Accept_27),
        new CqlLexer.AcceptMethod(this.Accept_28),
        null,
        new CqlLexer.AcceptMethod(this.Accept_30),
        new CqlLexer.AcceptMethod(this.Accept_31),
        new CqlLexer.AcceptMethod(this.Accept_32),
        null,
        new CqlLexer.AcceptMethod(this.Accept_34),
        new CqlLexer.AcceptMethod(this.Accept_35),
        null,
        new CqlLexer.AcceptMethod(this.Accept_37),
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        new CqlLexer.AcceptMethod(this.Accept_53),
        new CqlLexer.AcceptMethod(this.Accept_54),
        new CqlLexer.AcceptMethod(this.Accept_55),
        new CqlLexer.AcceptMethod(this.Accept_56),
        new CqlLexer.AcceptMethod(this.Accept_57),
        new CqlLexer.AcceptMethod(this.Accept_58),
        new CqlLexer.AcceptMethod(this.Accept_59),
        new CqlLexer.AcceptMethod(this.Accept_60),
        new CqlLexer.AcceptMethod(this.Accept_61),
        new CqlLexer.AcceptMethod(this.Accept_62),
        new CqlLexer.AcceptMethod(this.Accept_63),
        new CqlLexer.AcceptMethod(this.Accept_64),
        new CqlLexer.AcceptMethod(this.Accept_65),
        new CqlLexer.AcceptMethod(this.Accept_66),
        new CqlLexer.AcceptMethod(this.Accept_67),
        new CqlLexer.AcceptMethod(this.Accept_68),
        new CqlLexer.AcceptMethod(this.Accept_69),
        new CqlLexer.AcceptMethod(this.Accept_70),
        new CqlLexer.AcceptMethod(this.Accept_71),
        new CqlLexer.AcceptMethod(this.Accept_72),
        new CqlLexer.AcceptMethod(this.Accept_73),
        new CqlLexer.AcceptMethod(this.Accept_74),
        new CqlLexer.AcceptMethod(this.Accept_75),
        new CqlLexer.AcceptMethod(this.Accept_76),
        new CqlLexer.AcceptMethod(this.Accept_77),
        new CqlLexer.AcceptMethod(this.Accept_78),
        new CqlLexer.AcceptMethod(this.Accept_79),
        new CqlLexer.AcceptMethod(this.Accept_80),
        new CqlLexer.AcceptMethod(this.Accept_81),
        new CqlLexer.AcceptMethod(this.Accept_82),
        new CqlLexer.AcceptMethod(this.Accept_83),
        new CqlLexer.AcceptMethod(this.Accept_84)
      };
    }

    private CqlLexer.Token Accept_2()
    {
      return this.HandleEscapedIdentifiers();
    }

    private CqlLexer.Token Accept_3()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_4()
    {
      this.AdvanceIPos();
      this.ResetSymbolAsIdentifierState(false);
      return (CqlLexer.Token) null;
    }

    private CqlLexer.Token Accept_5()
    {
      return this.NewLiteralToken(this.YYText, LiteralKind.Number);
    }

    private CqlLexer.Token Accept_6()
    {
      return this.MapPunctuator(this.YYText);
    }

    private CqlLexer.Token Accept_7()
    {
      return this.MapOperator(this.YYText);
    }

    private CqlLexer.Token Accept_8()
    {
      ++this._lineNumber;
      this.AdvanceIPos();
      this.ResetSymbolAsIdentifierState(false);
      return (CqlLexer.Token) null;
    }

    private CqlLexer.Token Accept_9()
    {
      return this.NewLiteralToken(this.YYText, LiteralKind.String);
    }

    private CqlLexer.Token Accept_10()
    {
      return this.MapDoubleQuotedString(this.YYText);
    }

    private CqlLexer.Token Accept_11()
    {
      return this.NewParameterToken(this.YYText);
    }

    private CqlLexer.Token Accept_12()
    {
      return this.NewLiteralToken(this.YYText, LiteralKind.Binary);
    }

    private CqlLexer.Token Accept_13()
    {
      ++this._lineNumber;
      this.AdvanceIPos();
      this.ResetSymbolAsIdentifierState(false);
      return (CqlLexer.Token) null;
    }

    private CqlLexer.Token Accept_14()
    {
      return this.NewLiteralToken(this.YYText, LiteralKind.Boolean);
    }

    private CqlLexer.Token Accept_15()
    {
      return this.NewLiteralToken(this.YYText, LiteralKind.Time);
    }

    private CqlLexer.Token Accept_16()
    {
      return this.NewLiteralToken(this.YYText, LiteralKind.Guid);
    }

    private CqlLexer.Token Accept_17()
    {
      return this.NewLiteralToken(this.YYText, LiteralKind.DateTime);
    }

    private CqlLexer.Token Accept_18()
    {
      return this.NewLiteralToken(this.YYText, LiteralKind.DateTimeOffset);
    }

    private CqlLexer.Token Accept_20()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_21()
    {
      return this.NewLiteralToken(this.YYText, LiteralKind.Number);
    }

    private CqlLexer.Token Accept_22()
    {
      return this.MapPunctuator(this.YYText);
    }

    private CqlLexer.Token Accept_23()
    {
      return this.MapOperator(this.YYText);
    }

    private CqlLexer.Token Accept_25()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_26()
    {
      return this.NewLiteralToken(this.YYText, LiteralKind.Number);
    }

    private CqlLexer.Token Accept_27()
    {
      return this.MapPunctuator(this.YYText);
    }

    private CqlLexer.Token Accept_28()
    {
      return this.MapOperator(this.YYText);
    }

    private CqlLexer.Token Accept_30()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_31()
    {
      return this.NewLiteralToken(this.YYText, LiteralKind.Number);
    }

    private CqlLexer.Token Accept_32()
    {
      return this.MapOperator(this.YYText);
    }

    private CqlLexer.Token Accept_34()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_35()
    {
      return this.NewLiteralToken(this.YYText, LiteralKind.Number);
    }

    private CqlLexer.Token Accept_37()
    {
      return this.NewLiteralToken(this.YYText, LiteralKind.Number);
    }

    private CqlLexer.Token Accept_53()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_54()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_55()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_56()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_57()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_58()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_59()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_60()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_61()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_62()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_63()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_64()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_65()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_66()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_67()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_68()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_69()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_70()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_71()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_72()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_73()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_74()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_75()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_76()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_77()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_78()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_79()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_80()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_81()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_82()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_83()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private CqlLexer.Token Accept_84()
    {
      return this.MapIdentifierOrKeyword(this.YYText);
    }

    private void yybegin(int state)
    {
      this.yy_lexical_state = state;
    }

    private char yy_advance()
    {
      if (this.yy_buffer_index < this.yy_buffer_read)
        return CqlLexer.yy_translate.translate(this.yy_buffer[this.yy_buffer_index++]);
      if (this.yy_buffer_start != 0)
      {
        int yyBufferStart = this.yy_buffer_start;
        int index = 0;
        while (yyBufferStart < this.yy_buffer_read)
        {
          this.yy_buffer[index] = this.yy_buffer[yyBufferStart];
          ++yyBufferStart;
          ++index;
        }
        this.yy_buffer_end -= this.yy_buffer_start;
        this.yy_buffer_start = 0;
        this.yy_buffer_read = index;
        this.yy_buffer_index = index;
        int num = this.yy_reader.Read(this.yy_buffer, this.yy_buffer_read, this.yy_buffer.Length - this.yy_buffer_read);
        if (num <= 0)
          return '\x0081';
        this.yy_buffer_read += num;
      }
      int num1;
      for (; this.yy_buffer_index >= this.yy_buffer_read; this.yy_buffer_read += num1)
      {
        if (this.yy_buffer_index >= this.yy_buffer.Length)
          this.yy_buffer = this.yy_double(this.yy_buffer);
        num1 = this.yy_reader.Read(this.yy_buffer, this.yy_buffer_read, this.yy_buffer.Length - this.yy_buffer_read);
        if (num1 <= 0)
          return '\x0081';
      }
      return CqlLexer.yy_translate.translate(this.yy_buffer[this.yy_buffer_index++]);
    }

    private void yy_move_end()
    {
      if (this.yy_buffer_end > this.yy_buffer_start && '\n' == this.yy_buffer[this.yy_buffer_end - 1])
        --this.yy_buffer_end;
      if (this.yy_buffer_end <= this.yy_buffer_start || '\r' != this.yy_buffer[this.yy_buffer_end - 1])
        return;
      --this.yy_buffer_end;
    }

    private void yy_mark_start()
    {
      for (int yyBufferStart = this.yy_buffer_start; yyBufferStart < this.yy_buffer_index; ++yyBufferStart)
      {
        if (this.yy_buffer[yyBufferStart] == '\n' && !this.yy_last_was_cr)
          ++this.yyline;
        if (this.yy_buffer[yyBufferStart] == '\r')
        {
          ++this.yyline;
          this.yy_last_was_cr = true;
        }
        else
          this.yy_last_was_cr = false;
      }
      this.yychar = this.yychar + this.yy_buffer_index - this.yy_buffer_start;
      this.yy_buffer_start = this.yy_buffer_index;
    }

    private void yy_mark_end()
    {
      this.yy_buffer_end = this.yy_buffer_index;
    }

    private void yy_to_mark()
    {
      this.yy_buffer_index = this.yy_buffer_end;
      this.yy_at_bol = this.yy_buffer_end > this.yy_buffer_start && (this.yy_buffer[this.yy_buffer_end - 1] == '\r' || this.yy_buffer[this.yy_buffer_end - 1] == '\n');
    }

    internal string yytext()
    {
      return new string(this.yy_buffer, this.yy_buffer_start, this.yy_buffer_end - this.yy_buffer_start);
    }

    internal int yy_char()
    {
      return this.yychar;
    }

    private int yylength()
    {
      return this.yy_buffer_end - this.yy_buffer_start;
    }

    private char[] yy_double(char[] buf)
    {
      char[] chArray = new char[2 * buf.Length];
      for (int index = 0; index < buf.Length; ++index)
        chArray[index] = buf[index];
      return chArray;
    }

    private void yy_error(int code, bool fatal)
    {
      if (fatal)
        throw new EntitySqlException(EntityRes.GetString("ParserFatalError"));
    }

    internal CqlLexer.Token yylex()
    {
      int index1 = CqlLexer.yy_state_dtrans[this.yy_lexical_state];
      int num1 = -1;
      int index2 = -1;
      bool flag = true;
      this.yy_mark_start();
      if (CqlLexer.yy_acpt[index1] != 0)
      {
        index2 = index1;
        this.yy_mark_end();
      }
      while (true)
      {
        do
        {
          char ch = !flag || !this.yy_at_bol ? this.yy_advance() : '\x0080';
          int num2 = CqlLexer.yy_nxt[CqlLexer.yy_rmap[index1], CqlLexer.yy_cmap[(int) ch]];
          if ('\x0081' == ch && flag)
            return (CqlLexer.Token) null;
          if (-1 != num2)
          {
            index1 = num2;
            flag = false;
            if (CqlLexer.yy_acpt[index1] != 0)
            {
              index2 = index1;
              this.yy_mark_end();
            }
          }
          else
          {
            if (-1 == index2)
              throw new EntitySqlException(EntitySqlException.GetGenericErrorMessage(this._query, this.yychar));
            if ((2 & CqlLexer.yy_acpt[index2]) != 0)
              this.yy_move_end();
            this.yy_to_mark();
            if (index2 < 0)
            {
              if (index2 < 85)
                this.yy_error(0, false);
            }
            else
            {
              CqlLexer.AcceptMethod acceptMethod = this.accept_dispatch[index2];
              if (acceptMethod != null)
              {
                CqlLexer.Token token = acceptMethod();
                if (token != null)
                  return token;
              }
            }
            flag = true;
            index1 = CqlLexer.yy_state_dtrans[this.yy_lexical_state];
            num1 = -1;
            index2 = -1;
            this.yy_mark_start();
          }
        }
        while (CqlLexer.yy_acpt[index1] == 0);
        index2 = index1;
        this.yy_mark_end();
      }
    }

    internal CqlLexer(string query, ParserOptions parserOptions)
      : this()
    {
      this._query = query;
      this._parserOptions = parserOptions;
      this.yy_reader = (TextReader) new StringReader(this._query);
    }

    internal static CqlLexer.Token NewToken(short tokenId, System.Data.Entity.Core.Common.EntitySql.AST.Node tokenvalue)
    {
      return new CqlLexer.Token(tokenId, tokenvalue);
    }

    internal static CqlLexer.Token NewToken(short tokenId, CqlLexer.TerminalToken termToken)
    {
      return new CqlLexer.Token(tokenId, termToken);
    }

    internal string YYText
    {
      get
      {
        return this.yytext();
      }
    }

    internal int IPos
    {
      get
      {
        return this._iPos;
      }
    }

    internal int AdvanceIPos()
    {
      this._iPos += this.YYText.Length;
      return this._iPos;
    }

    internal static bool IsReservedKeyword(string term)
    {
      return CqlLexer.InternalKeywordDictionary.ContainsKey(term);
    }

    internal CqlLexer.Token MapIdentifierOrKeyword(string symbol)
    {
      CqlLexer.Token token;
      if (this.IsEscapedIdentifier(symbol, out token) || this.IsKeyword(symbol, out token))
        return token;
      return this.MapUnescapedIdentifier(symbol);
    }

    private bool IsEscapedIdentifier(string symbol, out CqlLexer.Token identifierToken)
    {
      if (symbol.Length > 1 && symbol[0] == '[')
      {
        if (symbol[symbol.Length - 1] != ']')
          throw EntitySqlException.Create(this._query, Strings.InvalidEscapedIdentifier((object) symbol), this._iPos, (string) null, false, (Exception) null);
        Identifier identifier = new Identifier(symbol.Substring(1, symbol.Length - 2), true, this._query, this._iPos);
        identifier.ErrCtx.ErrorContextInfo = "CtxEscapedIdentifier";
        identifierToken = CqlLexer.NewToken(CqlParser.ESCAPED_IDENTIFIER, (System.Data.Entity.Core.Common.EntitySql.AST.Node) identifier);
        return true;
      }
      identifierToken = (CqlLexer.Token) null;
      return false;
    }

    private bool IsKeyword(string symbol, out CqlLexer.Token terminalToken)
    {
      char lookAheadChar = this.GetLookAheadChar();
      if (!this.IsInSymbolAsIdentifierState(lookAheadChar) && !this.IsCanonicalFunctionCall(symbol, lookAheadChar) && CqlLexer.InternalKeywordDictionary.ContainsKey(symbol))
      {
        this.ResetSymbolAsIdentifierState(true);
        short internalKeyword = CqlLexer.InternalKeywordDictionary[symbol];
        if ((int) internalKeyword == (int) CqlParser.AS)
          this._symbolAsAliasIdentifierState = true;
        else if ((int) internalKeyword == (int) CqlParser.FUNCTION)
          this._symbolAsInlineFunctionNameState = true;
        terminalToken = CqlLexer.NewToken(internalKeyword, new CqlLexer.TerminalToken(symbol, this._iPos));
        return true;
      }
      terminalToken = (CqlLexer.Token) null;
      return false;
    }

    private bool IsCanonicalFunctionCall(string symbol, char lookAheadChar)
    {
      if (lookAheadChar == '(')
        return CqlLexer.InternalCanonicalFunctionNames.Contains(symbol);
      return false;
    }

    private CqlLexer.Token MapUnescapedIdentifier(string symbol)
    {
      bool flag = CqlLexer.InternalInvalidAliasNames.Contains(symbol);
      if (this._symbolAsInlineFunctionNameState)
        flag |= CqlLexer.InternalInvalidInlineFunctionNames.Contains(symbol);
      this.ResetSymbolAsIdentifierState(true);
      if (flag)
        throw EntitySqlException.Create(this._query, Strings.InvalidAliasName((object) symbol), this._iPos, (string) null, false, (Exception) null);
      Identifier identifier = new Identifier(symbol, false, this._query, this._iPos);
      identifier.ErrCtx.ErrorContextInfo = "CtxIdentifier";
      return CqlLexer.NewToken(CqlParser.IDENTIFIER, (System.Data.Entity.Core.Common.EntitySql.AST.Node) identifier);
    }

    private char GetLookAheadChar()
    {
      this.yy_mark_end();
      char c = this.yy_advance();
      while (c != '\x0081' && (char.IsWhiteSpace(c) || CqlLexer.IsNewLine(c)))
        c = this.yy_advance();
      this.yy_to_mark();
      return c;
    }

    private bool IsInSymbolAsIdentifierState(char lookAheadChar)
    {
      if (!this._symbolAsIdentifierState && !this._symbolAsAliasIdentifierState && !this._symbolAsInlineFunctionNameState)
        return lookAheadChar == '.';
      return true;
    }

    private void ResetSymbolAsIdentifierState(bool significant)
    {
      this._symbolAsIdentifierState = false;
      if (!significant)
        return;
      this._symbolAsAliasIdentifierState = false;
      this._symbolAsInlineFunctionNameState = false;
    }

    internal CqlLexer.Token MapOperator(string oper)
    {
      if (CqlLexer.InternalOperatorDictionary.ContainsKey(oper))
        return CqlLexer.NewToken(CqlLexer.InternalOperatorDictionary[oper], new CqlLexer.TerminalToken(oper, this._iPos));
      throw EntitySqlException.Create(this._query, Strings.InvalidOperatorSymbol, this._iPos, (string) null, false, (Exception) null);
    }

    internal CqlLexer.Token MapPunctuator(string punct)
    {
      if (!CqlLexer.InternalPunctuatorDictionary.ContainsKey(punct))
        throw EntitySqlException.Create(this._query, Strings.InvalidPunctuatorSymbol, this._iPos, (string) null, false, (Exception) null);
      this.ResetSymbolAsIdentifierState(true);
      if (punct.Equals(".", StringComparison.OrdinalIgnoreCase))
        this._symbolAsIdentifierState = true;
      return CqlLexer.NewToken(CqlLexer.InternalPunctuatorDictionary[punct], new CqlLexer.TerminalToken(punct, this._iPos));
    }

    internal CqlLexer.Token MapDoubleQuotedString(string symbol)
    {
      return this.NewLiteralToken(symbol, LiteralKind.String);
    }

    internal CqlLexer.Token NewLiteralToken(string literal, LiteralKind literalKind)
    {
      string str = literal;
      switch (literalKind)
      {
        case LiteralKind.String:
          if ('N' == literal[0])
          {
            literalKind = LiteralKind.UnicodeString;
            break;
          }
          break;
        case LiteralKind.Binary:
          str = CqlLexer.GetLiteralSingleQuotePayload(literal);
          if (!CqlLexer.IsValidBinaryValue(str))
            throw EntitySqlException.Create(this._query, Strings.InvalidLiteralFormat((object) "binary", (object) str), this._iPos, (string) null, false, (Exception) null);
          break;
        case LiteralKind.DateTime:
          str = CqlLexer.GetLiteralSingleQuotePayload(literal);
          if (!CqlLexer.IsValidDateTimeValue(str))
            throw EntitySqlException.Create(this._query, Strings.InvalidLiteralFormat((object) "datetime", (object) str), this._iPos, (string) null, false, (Exception) null);
          break;
        case LiteralKind.Time:
          str = CqlLexer.GetLiteralSingleQuotePayload(literal);
          if (!CqlLexer.IsValidTimeValue(str))
            throw EntitySqlException.Create(this._query, Strings.InvalidLiteralFormat((object) "time", (object) str), this._iPos, (string) null, false, (Exception) null);
          break;
        case LiteralKind.DateTimeOffset:
          str = CqlLexer.GetLiteralSingleQuotePayload(literal);
          if (!CqlLexer.IsValidDateTimeOffsetValue(str))
            throw EntitySqlException.Create(this._query, Strings.InvalidLiteralFormat((object) "datetimeoffset", (object) str), this._iPos, (string) null, false, (Exception) null);
          break;
        case LiteralKind.Guid:
          str = CqlLexer.GetLiteralSingleQuotePayload(literal);
          if (!CqlLexer.IsValidGuidValue(str))
            throw EntitySqlException.Create(this._query, Strings.InvalidLiteralFormat((object) "guid", (object) str), this._iPos, (string) null, false, (Exception) null);
          break;
      }
      return CqlLexer.NewToken(CqlParser.LITERAL, (System.Data.Entity.Core.Common.EntitySql.AST.Node) new Literal(str, literalKind, this._query, this._iPos));
    }

    internal CqlLexer.Token NewParameterToken(string param)
    {
      return CqlLexer.NewToken(CqlParser.PARAMETER, (System.Data.Entity.Core.Common.EntitySql.AST.Node) new QueryParameter(param, this._query, this._iPos));
    }

    internal CqlLexer.Token HandleEscapedIdentifiers()
    {
      for (char ch = this.YYText[0]; ch != '\x0081'; ch = this.yy_advance())
      {
        if (ch == ']')
        {
          this.yy_mark_end();
          if (this.yy_advance() != ']')
          {
            this.yy_to_mark();
            this.ResetSymbolAsIdentifierState(true);
            return this.MapIdentifierOrKeyword(this.YYText.Replace("]]", "]"));
          }
        }
      }
      throw EntitySqlException.Create(this._query, Strings.InvalidEscapedIdentifierUnbalanced((object) this.YYText), this._iPos, (string) null, false, (Exception) null);
    }

    internal static bool IsLetterOrDigitOrUnderscore(string symbol, out bool isIdentifierASCII)
    {
      isIdentifierASCII = true;
      for (int index = 0; index < symbol.Length; ++index)
      {
        isIdentifierASCII = isIdentifierASCII && symbol[index] < '\x0080';
        if (!isIdentifierASCII && !CqlLexer.IsLetter(symbol[index]) && (!CqlLexer.IsDigit(symbol[index]) && symbol[index] != '_'))
          return false;
      }
      return true;
    }

    private static bool IsLetter(char c)
    {
      if (c >= 'A' && c <= 'Z')
        return true;
      if (c >= 'a')
        return c <= 'z';
      return false;
    }

    private static bool IsDigit(char c)
    {
      if (c >= '0')
        return c <= '9';
      return false;
    }

    private static bool isHexDigit(char c)
    {
      if (CqlLexer.IsDigit(c) || c >= 'a' && c <= 'f')
        return true;
      if (c >= 'A')
        return c <= 'F';
      return false;
    }

    internal static bool IsNewLine(char c)
    {
      for (int index = 0; index < CqlLexer._newLineCharacters.Length; ++index)
      {
        if ((int) c == (int) CqlLexer._newLineCharacters[index])
          return true;
      }
      return false;
    }

    private static string GetLiteralSingleQuotePayload(string literal)
    {
      if (literal.Split('\'').Length != 3 || -1 == literal.IndexOf('\'') || -1 == literal.LastIndexOf('\''))
        throw new EntitySqlException(Strings.MalformedSingleQuotePayload);
      int num = literal.IndexOf('\'');
      string str = literal.Substring(num + 1, literal.Length - (num + 2));
      if (str.Split('\'').Length != 1)
        throw new EntitySqlException(Strings.MalformedSingleQuotePayload);
      return str;
    }

    private static bool IsValidGuidValue(string guidValue)
    {
      int num1 = 0;
      if (guidValue.Length - 1 - num1 + 1 != 36)
        return false;
      int num2 = 0;
      bool flag;
      for (flag = true; flag && num2 < 36; ++num2)
        flag = num2 == 8 || num2 == 13 || (num2 == 18 || num2 == 23) ? guidValue[num1 + num2] == '-' : CqlLexer.isHexDigit(guidValue[num1 + num2]);
      return flag;
    }

    private static bool IsValidBinaryValue(string binaryValue)
    {
      if (string.IsNullOrEmpty(binaryValue))
        return true;
      int num = 0;
      bool flag = binaryValue.Length > 0;
      while (flag && num < binaryValue.Length)
        flag = CqlLexer.isHexDigit(binaryValue[num++]);
      return flag;
    }

    private static bool IsValidDateTimeValue(string datetimeValue)
    {
      if (CqlLexer._reDateTimeValue == null)
        CqlLexer._reDateTimeValue = new Regex("^[0-9]{4}-[0-9]{1,2}-[0-9]{1,2}([ ])+[0-9]{1,2}:[0-9]{1,2}(:[0-9]{1,2}(\\.[0-9]{1,7})?)?$", RegexOptions.Singleline | RegexOptions.CultureInvariant);
      return CqlLexer._reDateTimeValue.IsMatch(datetimeValue);
    }

    private static bool IsValidTimeValue(string timeValue)
    {
      if (CqlLexer._reTimeValue == null)
        CqlLexer._reTimeValue = new Regex("^[0-9]{1,2}:[0-9]{1,2}(:[0-9]{1,2}(\\.[0-9]{1,7})?)?$", RegexOptions.Singleline | RegexOptions.CultureInvariant);
      return CqlLexer._reTimeValue.IsMatch(timeValue);
    }

    private static bool IsValidDateTimeOffsetValue(string datetimeOffsetValue)
    {
      if (CqlLexer._reDateTimeOffsetValue == null)
        CqlLexer._reDateTimeOffsetValue = new Regex("^[0-9]{4}-[0-9]{1,2}-[0-9]{1,2}([ ])+[0-9]{1,2}:[0-9]{1,2}(:[0-9]{1,2}(\\.[0-9]{1,7})?)?([ ])*[\\+-][0-9]{1,2}:[0-9]{1,2}$", RegexOptions.Singleline | RegexOptions.CultureInvariant);
      return CqlLexer._reDateTimeOffsetValue.IsMatch(datetimeOffsetValue);
    }

    private static Dictionary<string, short> InternalKeywordDictionary
    {
      get
      {
        if (CqlLexer._keywords == null)
          CqlLexer._keywords = new Dictionary<string, short>(60, (IEqualityComparer<string>) CqlLexer._stringComparer)
          {
            {
              "all",
              CqlParser.ALL
            },
            {
              "and",
              CqlParser.AND
            },
            {
              "anyelement",
              CqlParser.ANYELEMENT
            },
            {
              "apply",
              CqlParser.APPLY
            },
            {
              "as",
              CqlParser.AS
            },
            {
              "asc",
              CqlParser.ASC
            },
            {
              "between",
              CqlParser.BETWEEN
            },
            {
              "by",
              CqlParser.BY
            },
            {
              "case",
              CqlParser.CASE
            },
            {
              "cast",
              CqlParser.CAST
            },
            {
              "collate",
              CqlParser.COLLATE
            },
            {
              "collection",
              CqlParser.COLLECTION
            },
            {
              "createref",
              CqlParser.CREATEREF
            },
            {
              "cross",
              CqlParser.CROSS
            },
            {
              "deref",
              CqlParser.DEREF
            },
            {
              "desc",
              CqlParser.DESC
            },
            {
              "distinct",
              CqlParser.DISTINCT
            },
            {
              "element",
              CqlParser.ELEMENT
            },
            {
              "else",
              CqlParser.ELSE
            },
            {
              "end",
              CqlParser.END
            },
            {
              "escape",
              CqlParser.ESCAPE
            },
            {
              "except",
              CqlParser.EXCEPT
            },
            {
              "exists",
              CqlParser.EXISTS
            },
            {
              "false",
              CqlParser.LITERAL
            },
            {
              "flatten",
              CqlParser.FLATTEN
            },
            {
              "from",
              CqlParser.FROM
            },
            {
              "full",
              CqlParser.FULL
            },
            {
              "function",
              CqlParser.FUNCTION
            },
            {
              "group",
              CqlParser.GROUP
            },
            {
              "grouppartition",
              CqlParser.GROUPPARTITION
            },
            {
              "having",
              CqlParser.HAVING
            },
            {
              "in",
              CqlParser.IN
            },
            {
              "inner",
              CqlParser.INNER
            },
            {
              "intersect",
              CqlParser.INTERSECT
            },
            {
              "is",
              CqlParser.IS
            },
            {
              "join",
              CqlParser.JOIN
            },
            {
              "key",
              CqlParser.KEY
            },
            {
              "left",
              CqlParser.LEFT
            },
            {
              "like",
              CqlParser.LIKE
            },
            {
              "limit",
              CqlParser.LIMIT
            },
            {
              "multiset",
              CqlParser.MULTISET
            },
            {
              "navigate",
              CqlParser.NAVIGATE
            },
            {
              "not",
              CqlParser.NOT
            },
            {
              "null",
              CqlParser.NULL
            },
            {
              "of",
              CqlParser.OF
            },
            {
              "oftype",
              CqlParser.OFTYPE
            },
            {
              "on",
              CqlParser.ON
            },
            {
              "only",
              CqlParser.ONLY
            },
            {
              "or",
              CqlParser.OR
            },
            {
              "order",
              CqlParser.ORDER
            },
            {
              "outer",
              CqlParser.OUTER
            },
            {
              "overlaps",
              CqlParser.OVERLAPS
            },
            {
              "ref",
              CqlParser.REF
            },
            {
              "relationship",
              CqlParser.RELATIONSHIP
            },
            {
              "right",
              CqlParser.RIGHT
            },
            {
              "row",
              CqlParser.ROW
            },
            {
              "select",
              CqlParser.SELECT
            },
            {
              "set",
              CqlParser.SET
            },
            {
              "skip",
              CqlParser.SKIP
            },
            {
              "then",
              CqlParser.THEN
            },
            {
              "top",
              CqlParser.TOP
            },
            {
              "treat",
              CqlParser.TREAT
            },
            {
              "true",
              CqlParser.LITERAL
            },
            {
              "union",
              CqlParser.UNION
            },
            {
              "using",
              CqlParser.USING
            },
            {
              "value",
              CqlParser.VALUE
            },
            {
              "when",
              CqlParser.WHEN
            },
            {
              "where",
              CqlParser.WHERE
            },
            {
              "with",
              CqlParser.WITH
            }
          };
        return CqlLexer._keywords;
      }
    }

    private static HashSet<string> InternalInvalidAliasNames
    {
      get
      {
        if (CqlLexer._invalidAliasNames == null)
          CqlLexer._invalidAliasNames = new HashSet<string>((IEqualityComparer<string>) CqlLexer._stringComparer)
          {
            "all",
            "and",
            "apply",
            "as",
            "asc",
            "between",
            "by",
            "case",
            "cast",
            "collate",
            "createref",
            "deref",
            "desc",
            "distinct",
            "element",
            "else",
            "end",
            "escape",
            "except",
            "exists",
            "flatten",
            "from",
            "group",
            "having",
            "in",
            "inner",
            "intersect",
            "is",
            "join",
            "like",
            "multiset",
            "navigate",
            "not",
            "null",
            "of",
            "oftype",
            "on",
            "only",
            "or",
            "overlaps",
            "ref",
            "relationship",
            "select",
            "set",
            "then",
            "treat",
            "union",
            "using",
            "when",
            "where",
            "with"
          };
        return CqlLexer._invalidAliasNames;
      }
    }

    private static HashSet<string> InternalInvalidInlineFunctionNames
    {
      get
      {
        if (CqlLexer._invalidInlineFunctionNames == null)
          CqlLexer._invalidInlineFunctionNames = new HashSet<string>((IEqualityComparer<string>) CqlLexer._stringComparer)
          {
            "anyelement",
            "element",
            "function",
            "grouppartition",
            "key",
            "ref",
            "row",
            "skip",
            "top",
            "value"
          };
        return CqlLexer._invalidInlineFunctionNames;
      }
    }

    private static Dictionary<string, short> InternalOperatorDictionary
    {
      get
      {
        if (CqlLexer._operators == null)
          CqlLexer._operators = new Dictionary<string, short>(16, (IEqualityComparer<string>) CqlLexer._stringComparer)
          {
            {
              "==",
              CqlParser.OP_EQ
            },
            {
              "!=",
              CqlParser.OP_NEQ
            },
            {
              "<>",
              CqlParser.OP_NEQ
            },
            {
              "<",
              CqlParser.OP_LT
            },
            {
              "<=",
              CqlParser.OP_LE
            },
            {
              ">",
              CqlParser.OP_GT
            },
            {
              ">=",
              CqlParser.OP_GE
            },
            {
              "&&",
              CqlParser.AND
            },
            {
              "||",
              CqlParser.OR
            },
            {
              "!",
              CqlParser.NOT
            },
            {
              "+",
              CqlParser.PLUS
            },
            {
              "-",
              CqlParser.MINUS
            },
            {
              "*",
              CqlParser.STAR
            },
            {
              "/",
              CqlParser.FSLASH
            },
            {
              "%",
              CqlParser.PERCENT
            }
          };
        return CqlLexer._operators;
      }
    }

    private static Dictionary<string, short> InternalPunctuatorDictionary
    {
      get
      {
        if (CqlLexer._punctuators == null)
          CqlLexer._punctuators = new Dictionary<string, short>(16, (IEqualityComparer<string>) CqlLexer._stringComparer)
          {
            {
              ",",
              CqlParser.COMMA
            },
            {
              ":",
              CqlParser.COLON
            },
            {
              ".",
              CqlParser.DOT
            },
            {
              "?",
              CqlParser.QMARK
            },
            {
              "(",
              CqlParser.L_PAREN
            },
            {
              ")",
              CqlParser.R_PAREN
            },
            {
              "[",
              CqlParser.L_BRACE
            },
            {
              "]",
              CqlParser.R_BRACE
            },
            {
              "{",
              CqlParser.L_CURLY
            },
            {
              "}",
              CqlParser.R_CURLY
            },
            {
              ";",
              CqlParser.SCOLON
            },
            {
              "=",
              CqlParser.EQUAL
            }
          };
        return CqlLexer._punctuators;
      }
    }

    private static HashSet<string> InternalCanonicalFunctionNames
    {
      get
      {
        if (CqlLexer._canonicalFunctionNames == null)
          CqlLexer._canonicalFunctionNames = new HashSet<string>((IEqualityComparer<string>) CqlLexer._stringComparer)
          {
            "left",
            "right"
          };
        return CqlLexer._canonicalFunctionNames;
      }
    }

    private delegate CqlLexer.Token AcceptMethod();

    internal class Token
    {
      private readonly short _tokenId;
      private readonly object _tokenValue;

      internal Token(short tokenId, System.Data.Entity.Core.Common.EntitySql.AST.Node tokenValue)
      {
        this._tokenId = tokenId;
        this._tokenValue = (object) tokenValue;
      }

      internal Token(short tokenId, CqlLexer.TerminalToken terminal)
      {
        this._tokenId = tokenId;
        this._tokenValue = (object) terminal;
      }

      internal short TokenId
      {
        get
        {
          return this._tokenId;
        }
      }

      internal object Value
      {
        get
        {
          return this._tokenValue;
        }
      }
    }

    internal class TerminalToken
    {
      private readonly string _token;
      private readonly int _iPos;

      internal TerminalToken(string token, int iPos)
      {
        this._token = token;
        this._iPos = iPos;
      }

      internal int IPos
      {
        get
        {
          return this._iPos;
        }
      }

      internal string Token
      {
        get
        {
          return this._token;
        }
      }
    }

    internal static class yy_translate
    {
      internal static char translate(char c)
      {
        if (char.IsWhiteSpace(c) || char.IsControl(c))
          return CqlLexer.IsNewLine(c) ? '\n' : ' ';
        if (c < '\x007F')
          return c;
        return char.IsLetter(c) || char.IsSymbol(c) || char.IsNumber(c) ? 'a' : '`';
      }
    }
  }
}
